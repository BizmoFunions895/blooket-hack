javascript:(function(){(() => {/n    let n = document.createElement('iframe');/n    document.body.append(n);/n    window.alert = n.contentWindow.alert.bind(window);/n    window.prompt = n.contentWindow.prompt.bind(window);/n    window.confirm = n.contentWindow.confirm.bind(window);/n    n.remove();/n})();/n(() => {/n    let style = document.createElement('style');/n    style.innerHTML = (`details > summary {/n    cursor: pointer;/n    transition: 0.15s;/n    list-style: none;/n}/ndetails > summary:hover {/n    color: hsl(0, 0%25, 50%25)/n}/ndetails > summary::-webkit-details-marker {/n    display: none;/n}/ndetails summary ~ * {/n    animation: sweep .5s ease-in-out;/n}/n/n%40keyframes sweep {/n    0%25    {opacity: 0; transform: translateY(-10px)}/n    100%25  {opacity: 1; transform: translateY(0)}/n}/n.cheat {/n    border: none;/n    background: hsl(0, 0%25, 20%25);/n    padding: 5px;/n    margin: 3px;/n    width: 60%25;/n    color: hsl(0, 0%25, 100%25);/n    transition: 0.2s;/n    border-radius: 5px;/n    cursor: pointer;/n}/n.cheat:hover {/n    background: hsl(0, 0%25, 30%25);/n}`);/n/n    const GUI = document.createElement('div');/n    GUI.appendChild(style);/n    GUI.style.width = '400px';/n    //GUI.style.height = '500px';/n    GUI.style.background = 'hsl(0, 0%25, 10%25)';/n    GUI.style.borderRadius = '10px';/n    GUI.style.position = 'absolute';/n    GUI.style.textAlign = 'center';/n    GUI.style.fontFamily = 'Nunito';/n    GUI.style.color = 'white';/n    GUI.style.overflow = 'hidden';/n    GUI.style.top = '50px';/n    GUI.style.left = '50px';/n/n    var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;/n    GUI.onmousedown = ((e = window.event) => {/n        e.preventDefault();/n        pos3 = e.clientX;/n        pos4 = e.clientY;/n        document.onmouseup = (() => {/n            document.onmouseup = null;/n            document.onmousemove = null;/n        });/n        document.onmousemove = ((e) => {/n            e = e || window.event;/n            e.preventDefault();/n            pos1 = pos3 - e.clientX;/n            pos2 = pos4 - e.clientY;/n            pos3 = e.clientX;/n            pos4 = e.clientY;/n            GUI.style.top = (GUI.offsetTop - pos2) + "px";/n            GUI.style.left = (GUI.offsetLeft - pos1) + "px";/n        });/n    });/n/n    let header = document.createElement('div');/n    GUI.appendChild(header);/n    header.style.width = '100%25';/n    header.style.height = '35px';/n    header.style.paddingTop = '2px';/n    header.style.fontSize = '1.5rem';/n    header.style.textAlign = 'center'/n    header.innerHTML = `Blooket Cheats <span style="font-size: 0.75rem">v4.10.22</span>`;/n/n    let loop;/n/n    let close = document.createElement('button');/n    header.appendChild(close);/n    close.style.background = 'red';/n    close.style.height = '45px';/n    close.style.width = '45px';/n    close.style.border = 'none';/n    close.style.cursor = 'pointer';/n    close.style.position = 'absolute';/n    close.style.top = '-10px';/n    close.style.right = '-10px';/n    close.style.fontSize = '1.5rem';/n    close.style.borderRadius = '10px';/n    close.style.fontFamily = 'Nunito';/n    close.style.fontWeight = 'bolder';/n    close.style.paddingTop = '10px';/n    close.style.paddingRight = '15px';/n    close.innerText = 'X';/n    close.onclick = () => {/n        GUI.remove();/n        clearInterval(loop);/n        removeEventListener('keypress', toggleHidden)/n    }/n/n    let minimize = document.createElement('button');/n    header.appendChild(minimize);/n    minimize.style.background = '#444444';/n    minimize.style.height = '45px';/n    minimize.style.width = '45px';/n    minimize.style.border = 'none';/n    minimize.style.cursor = 'pointer';/n    minimize.style.position = 'absolute';/n    minimize.style.top = '-10px';/n    minimize.style.left = '-10px';/n    minimize.style.fontSize = '1.5rem';/n    minimize.style.borderRadius = '10px';/n    minimize.style.fontFamily = 'Nunito';/n    minimize.style.fontWeight = 'bolder';/n    minimize.style.paddingTop = '10px';/n    minimize.style.paddingLeft = '15px';/n    minimize.innerText = '-';/n    minimize.onclick = () => {/n        bodyDiv.hidden = !bodyDiv.hidden;/n    }/n    let bodyDiv = document.createElement('div');/n    let body = document.createElement('div');/n    bodyDiv.appendChild(body);/n    GUI.appendChild(bodyDiv);/n/n    body.innerHTML = (`<span id="curPageEl">${getSite(true) ? `Current gamemode: ${getSite(true)}` : 'No game detected'}</span><br><span>(Press E to hide)</span><br>`);/n    body.style.display = 'block';/n    body.style.margin = '10px';/n    //body.style.background = 'white';/n    body.style.minHeight = '70px';/n/n    let activeCheats = document.createElement('span');/n    body.appendChild(activeCheats);/n/n    document.body.append(GUI);/n/n    let footer = document.createElement('div');/n    bodyDiv.appendChild(footer);/n    footer.style.fontSize = '0.9rem';/n    footer.style.paddingBottom = '5px';/n    footer.innerHTML = (`<span>GUI by BizmoFunions895#5394<br>Cheats by <a style="color: lightblue" href="https://twitter.com/glizuwu">gliz</a></span>`);/n/n    var getValues = () => new Promise((e, t) => {/n        try {/n            let n = window.webpackJsonp.map(e => Object.keys(e[1]).map(t => e[1][t])).reduce((e, t) => [...e, ...t], []).find(e => /\w{8}-\w{4}-\w{4}-\w{4}-\w{12}/.test(e.toString()) && /\(new TextEncoder\)\.encode\(\"(.+?)\"\)/.test(e.toString())).toString();/n            e({/n                blooketBuild: n.match(/\w{8}-\w{4}-\w{4}-\w{4}-\w{12}/)[0],/n                secret: n.match(/\(new TextEncoder\)\.encode\(\"(.+?)\"\)/)[1]/n            })/n        } catch {/n            t("Could not fetch auth details")/n        }/n    })/n    var encodeValues = async (e, t) => {/n        let d = window.crypto.getRandomValues(new Uint8Array(12));/n        return window.btoa(Array.from(d).map(e => String.fromCharCode(e)).join("") + Array.from(new Uint8Array(await window.crypto.subtle.encrypt({/n            name: "AES-GCM",/n            iv: d/n        }, await window.crypto.subtle.importKey("raw", await window.crypto.subtle.digest("SHA-256", (new TextEncoder).encode(t)), {/n            name: "AES-GCM"/n        }, !1, ["encrypt"]), (new TextEncoder).encode(JSON.stringify(e))))).map(e => String.fromCharCode(e)).join(""))/n    };/n/n    function reactHandler() {/n        return Object.values(document.querySelector('#app > div > div'))[1].children[1]._owner;/n    }/n/n    let autoAnswer, highlightAnswers, choiceESP, autoPassword, chestESP;/n/n    let cheats = {/n        global: {/n            'Get Daily Rewards': () => {/n                fetch("https://api.blooket.com/api/users", { credentials: "include" }).then(x => x.json()).then(x => {/n                    getValues().then(async e => {/n                        fetch("https://api.blooket.com/api/users/add-rewards", {/n                            method: "put",/n                            credentials: "include",/n                            headers: {/n                                "content-type": "application/json",/n                                "X-Blooket-Build": e.blooketBuild/n                            },/n                            body: await encodeValues({/n                                name: x.name,/n                                addedTokens: 250,/n                                addedXp: 300/n                            }, e.secret)/n                        });/n                        fetch("https://api.blooket.com/api/users/add-rewards", {/n                            method: "put",/n                            credentials: "include",/n                            headers: {/n                                "content-type": "application/json",/n                                "X-Blooket-Build": e.blooketBuild/n                            },/n                            body: await encodeValues({/n                                name: x.name,/n                                addedTokens: 250,/n                                addedXp: 300/n                            }, e.secret)/n                        }).then(() => alert('Added daily rewawrds!')).catch(() => alert('There was an error when adding rewards!'));;/n                    }).catch(() => alert('There was an error encoding requests!'));/n                }).catch(() => alert('There was an error getting username!'));/n            },/n            'Spoof Blooks': () => {/n                if (!window.location.pathname.split('/').includes('lobby')) return alert('You must be in a game lobby! (e.g. https://www.blooket.com/play/lobby)');/n                reactHandler().stateNode.setState({ lockedBlooks: [], takenBlooks: [] });/n            },/n            'Toggle Auto Answer': () => { autoAnswer = !autoAnswer },/n            'Toggle Highlight Answers': () => { highlightAnswers = !highlightAnswers },/n            'Spam Open Boxes': () => {/n                let box = prompt(`Which box do you want to open? (e.g. Space)`);/n                let boxes = {/n                    safari: 25,/n                    aquatic: 20,/n                    bot: 20,/n                    space: 20,/n                    breakfast: 15,/n                    medieval: 15,/n                    wonderland: 15/n                }/n                if (!Object.keys(boxes).includes(box.toLowerCase())) return alert('I could not find that box!');/n                let amount = prompt('How many boxes do you want to open?');/n                fetch("https://api.blooket.com/api/users", { credentials: "include" }).then(x => x.json()).then(x => {/n                    if (x.tokens < boxes[box.toLowerCase()] * amount) amount = Math.floor(x.tokens / boxes[box.toLowerCase()]);/n                    if (!amount) return alert('You do not have enough tokens!');/n                    let wait = ms => new Promise(r => setTimeout(r, ms));/n                    getValues().then(async e => {/n                        let error = false,/n                            blooks = [];/n                        for (let i = 0; i < amount; i++) {/n                            fetch("https://api.blooket.com/api/users/unlockblook", {/n                                method: "put",/n                                credentials: "include",/n                                headers: {/n                                    "content-type": "application/json",/n                                    "X-Blooket-Build": e.blooketBuild/n                                },/n                                body: await encodeValues({/n                                    name: x.name,/n                                    box: box.charAt(0).toUpperCase() + box.slice(1).toLowerCase()/n                                }, e.secret)/n                            }).then(async x => {/n                                let blook = await x.json();/n                                blooks.push(blook.unlockedBlook);/n                                alert(`${blook.unlockedBlook} (${i + 1}/${amount})`);/n                            }).catch(() => { error = true });/n                            await wait(750);/n                            if (error) break;/n                        }/n                        let count = {};/n                        blooks.forEach(blook => { count[blook] = (count[blook] || 0) + 1 });/n                        alert(`Results:\n` + Object.entries(count).map((x) => `    ${x[1]} ${x[0]}`).join(`\n`));/n                    }).catch(() => alert('There was an error encoding requests!'));/n                }).catch(() => alert('There was an error getting username!'));/n            },/n            'Auto Sell Dupes': () => {/n                fetch("https://api.blooket.com/api/users", { credentials: "include" }).then(x => x.json()).then(x => {/n                    let blooks = Object.entries(x.unlocks).map(x => [x[0], x[1] - 1]).filter(x => x[1] > 0);/n                    let wait = ms => new Promise(r => setTimeout(r, ms));/n                    getValues().then(async e => {/n                        let error = false;/n                        alert('Selling duplicate blooks, please wait');/n                        for (let [blook, numSold] of blooks) {/n                            fetch("https://api.blooket.com/api/users/sellblook", {/n                                method: "put",/n                                credentials: "include",/n                                headers: {/n                                    "content-type": "application/json",/n                                    "X-Blooket-Build": e.blooketBuild/n                                },/n                                body: await encodeValues({/n                                    name: x.name,/n                                    blook,/n                                    numSold/n                                }, e.secret)/n                            }).catch(() => { error = true });/n                            await wait(750);/n                            if (error) break;/n                        }/n                        alert(`Results:\n` + blooks.map((x) => `    ${x[1]} ${x[0]}`).join(`\n`));/n                    }).catch(() => alert('There was an error encoding requests!'));/n                }).catch(() => alert('There was an error getting user data!'));/n            }/n        },/n        cafe: {/n            'Infinite Food': () => {/n                if (document.location.pathname != "/cafe") return alert("This cheat doesn't work in the shop!");/n                reactHandler().stateNode.state.foods.forEach(e => e.stock = 99999);/n                reactHandler().stateNode.forceUpdate();/n            },/n            'Max Levels': () => {/n                if (document.location.pathname != "/cafe/shop") return alert("This cheat only works in the shop!");/n                Object.keys(reactHandler().stateNode.state.items).forEach(x => reactHandler().stateNode.state.items[x] = 5);/n                reactHandler().stateNode.forceUpdate();/n            },/n            'Set Cash': () => {/n                reactHandler().stateNode.setState({ cafeCash: Number(parseFloat(prompt('How much cash would you like?'))) });/n            },/n            'Reset Abilities': () => {/n                Object.keys(reactHandler().stateNode.state.abilities).forEach(x => reactHandler().stateNode.state.abilities[x] = 5);/n                reactHandler().stateNode.forceUpdate();/n            }/n        },/n        kingdom: {/n            'Choice ESP': () => { choiceESP = !choiceESP },/n            'Max Stats': () => {/n                reactHandler().stateNode.setState({ materials: 100, people: 100, happiness: 100, gold: 100 });/n            },/n            'Disable Toucan': () => {/n                reactHandler().stateNode.taxCounter = Number.MAX_VALUE;/n            },/n            'Set Guests': () => {/n                let guestScore = Number(parseFloat(prompt('How many guests do you want?')));/n                reactHandler().stateNode.setState({ guestScore });/n            },/n            'Skip Guest': () => {/n                reactHandler().stateNode.nextGuest();/n            }/n        },/n        crypto: {/n            'Auto Hack': () => { autoPassword = !autoPassword },/n            'Set Crypto': () => {/n                let amount = Number(parseFloat(prompt('How much crypto do you want?')));/n                reactHandler().stateNode.setState({ crypto2: amount, crypto: amount });/n            },/n            'Custom Password': () => {/n                let password = Number(parseFloat(prompt('What do you want to set your password to?')));/n                reactHandler().stateNode.setState({ password });/n            },/n            'Remove Hack': () => {/n                reactHandler().stateNode.setState({ hack: '' })/n            },/n            'Reset Player\'s Crypto': () => {/n                let target = prompt("Name of player");/n                let e = reactHandler();/n                !target || e.memoizedProps.firebase.getDatabaseVal(e.memoizedProps.client.hostId, "c", (...o) => {/n                    let data = Object.keys(o[0]);/n                    if (data.some(e => e == target)) data.forEach(player => {/n                        if (player == target) {/n                            e.memoizedProps.firebase.setVal({/n                                id: e.memoizedProps.client.hostId,/n                                path: "c/" + e.memoizedProps.client.name,/n                                val: {/n                                    p: e.stateNode.state.password,/n                                    b: e.memoizedProps.client.blook,/n                                    cr: e.stateNode.state.crypto,/n                                    tat: player + ":" + (o[0][player].cr || 0)/n                                }/n                            }); alert('Reset player\'s crypto')/n                        };/n                    });/n                    else alert("Player does not exist");/n                })/n            }/n        },/n        factory: {/n            'All Mega Bot': () => {/n                let blooks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0].fill({ name: "Mega Bot", color: "#d71f27", class: "🤖", rarity: "Legendary", cash: [80000, 430000, 4200000, 62000000, 1000000000], time: [5, 5, 3, 3, 3], price: [7000000, 120000000, 1900000000, 35000000000], active: false, level: 4, bonus: 5.5 })/n                reactHandler().stateNode.setState({ blooks });/n            },/n            'Remove Glitches': () => {/n                reactHandler().stateNode.setState({/n                    glitch: "",/n                    bites: 0,/n                    ads: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],/n                    hazards: ["", "", "", "", ""],/n                    lol: false,/n                    joke: false,/n                    slow: false,/n                    dance: false,/n                    popUpAmount: 0,/n                });/n            },/n            'Max Blooks': () => {/n                reactHandler().stateNode.state.blooks.forEach(blook => { blook.level = 4 });/n            },/n            'Set Cash': () => {/n                let cash = Number(parseFloat(prompt('How much cash do you want?')));/n                reactHandler().stateNode.setState({ cash });/n            },/n        },/n        fishing: {/n            'Set Weight': () => {/n                let weight = Number(parseFloat(prompt('How much weight do you want?')));/n                reactHandler().stateNode.setState({ weight2: weight, weight });/n            },/n            'Set Lure': () => {/n                let lure = Number(parseFloat(prompt('What do you want to set your lure to? (1 - 5)'))) - 1;/n                reactHandler().stateNode.setState({ lure: lure < 0 ? 0 : lure > 4 ? 4 : lure });/n            }/n        },/n        gold: {/n            'Set Gold': () => {/n                let gold = Number(parseFloat(prompt('How much gold do you want?')));/n                reactHandler().stateNode.setState({ gold2: gold, gold });/n            },/n            'Chest ESP': () => { chestESP = !chestESP },/n            "Set Player's Gold": () => {/n                let e = reactHandler(),/n                    player = prompt("Player to set gold"),/n                    amount = Number(parseFloat(prompt("Amount to set gold to")));/n                e.memoizedProps.firebase.setVal({/n                    id: e.memoizedProps.client.hostId,/n                    path: "c/" + e.memoizedProps.client.name,/n                    val: {/n                        b: e.memoizedProps.client.blook,/n                        g: e.stateNode.state.gold,/n                        tat: player + ":swap:" + amount/n                    }/n                })/n            }/n        },/n        racing: {/n            'Instant Win': () => {/n                reactHandler().stateNode.setState({ progress: reactHandler().stateNode.state.goalAmount });/n                setTimeout(() => {/n                    try {/n                        Array.from(document.body.querySelectorAll('div[class*="answerText"]')).filter(t => t.firstChild.innerHTML == reactHandler().memoizedState.question.correctAnswers[0])[0].click();/n                    } catch {/n                        try {/n                            Array.from(document.body.querySelectorAll('div[class*="answerText"]')).filter(t => t.firstChild.innerHTML == reactHandler().memoizedProps.client.question.correctAnswers[0])[0].click();/n                        } catch { };/n                    };/n                }, 100);/n            }/n        },/n        defense: {/n            'Clear Enemies': () => {/n                reactHandler().stateNode.enemies = [];/n            },/n            'Max Towers': () => {/n                reactHandler().stateNode.towers.forEach(tower => {/n                    tower.damage = 99999999;/n                    tower.range = 99999999;/n                    tower.fullCd = 0;/n                });/n            },/n            'Remove Ducks': () => {/n                data = reactHandler().stateNode;/n                data.ducks.forEach(x => { data.tiles[x.y][x.x] = 0; });/n                data.ducks.length = 0;/n            },/n            'Place Towers Anywhere': () => {/n                reactHandler().stateNode.tiles = reactHandler().stateNode.tiles.map(x => x.map(e => e == 2 ? 0 : e));/n            },/n            'Set Damage': () => {/n                let dmg = Number(parseFloat(prompt('How much damage do you want?')));/n                reactHandler().stateNode.dmg = dmg;/n            },/n            'Set Round': () => {/n                let round = Number(parseFloat(prompt('What round do you want to set it to?')));/n                reactHandler().stateNode.setState({ round });/n            },/n            'Set Tokens': () => {/n                let tokens = Number(parseFloat(prompt('How many tokens do you want?')));/n                reactHandler().stateNode.setState({ tokens });/n            }/n        },/n        doom: {/n            'Set Coins': () => {/n                try {/n                    reactHandler().stateNode.props.setTowerCoins(Number(parseFloat(prompt('How many coins do you want?'))));/n                } catch { }/n            },/n            'Lower Enemy Stats': () => {/n                let data = reactHandler().stateNode.state;/n                if (data.phase != 'select') return alert('You must be on the attribute selection page!');/n                reactHandler().stateNode.setState({ enemyCard: { ...data.enemyCard, strength: 0, charisma: 0, wisdom: 0 } })/n            },/n            'Max Player Stats': () => {/n                let data = reactHandler().stateNode.state;/n                if (data.phase != 'select') return alert('You must be on the attribute selection page!');/n                reactHandler().stateNode.setState({ myCard: { ...data.myCard, strength: 20, charisma: 20, wisdom: 20 } })/n            },/n            'Heal Player': () => {/n                reactHandler().stateNode.setState({ myLife: 100 });/n            }/n        },/n        rush: {/n            'Set Defense': () => {/n                let e = reactHandler();/n                e.stateNode.props.firebase.setVal({/n                    id: e.stateNode.props.client.hostId,/n                    path: 'c/' + e.stateNode.props.client.name + '/d',/n                    val: Number(parseFloat(prompt('How much defense do you want?')))/n                });/n            },/n            'Set Blooks': () => {/n                let e = reactHandler();/n                e.stateNode.props.firebase.setVal({/n                    id: e.stateNode.props.client.hostId,/n                    path: 'c/' + e.stateNode.props.client.name + '/bs',/n                    val: Number(parseFloat(prompt('How many blooks do you want?')))/n                });/n            }/n        }/n    };/n/n    let global = document.createElement('details');/n    global.innerHTML = (`<summary style="padding: 10px; font-size: 1.5em; font-weight: bolder">Global</summary>`);/n    for (var i = 0; i < Object.keys(cheats.global).length; i++) {/n        let cheat = createButton(Object.keys(cheats.global)[i]);/n        cheat.onclick = cheats.global[Object.keys(cheats.global)[i]];/n        global.appendChild(cheat);/n    }/n    global.open = true;/n    global.style.paddingBottom = '10px';/n    body.appendChild(global);/n/n    let cheatDiv = document.createElement('div');/n    body.appendChild(cheatDiv);/n/n    loop = setInterval(() => {/n        if (curPage != getSite()) {/n            curPage = getSite();/n            curPageEl.innerText = getSite(true) ? `Current gamemode: ${getSite(true)}` : 'No game detected'/n            Array.from(cheatDiv.children).forEach(x => x.remove());/n            if (curPage && cheats[curPage]) Object.keys(cheats[curPage]).forEach(cheat => {/n                let button = createButton(cheat);/n                button.onclick = cheats[curPage][cheat];/n                cheatDiv.appendChild(button);/n                cheatDiv.appendChild(document.createElement('br'));/n            })/n        };/n        let activeCheatsText = (`Auto Answer: ${autoAnswer ? 'Enabled' : 'Disabled'}\nHighlight Answers: ${highlightAnswers ? 'Enabled' : 'Disabled'}${curPage == 'kingdom' ? `\nChoice ESP: ${choiceESP ? 'Enabled' : 'Disabled'}` : curPage == 'crypto' ? `\nAuto Hack: ${autoPassword ? 'Enabled' : 'Disabled'}` : curPage == 'gold' ? `\nChest ESP: ${chestESP ? 'Enabled' : 'Disabled'}` : ''}`);/n        activeCheats.innerText != activeCheatsText && (activeCheats.innerText = activeCheatsText);/n        if (autoAnswer) {/n            try {/n                Array.from(document.body.querySelectorAll('div[class*="answerText"]')).filter(t => t.firstChild.innerHTML == reactHandler().memoizedState.question.correctAnswers[0])[0].click();/n            } catch {/n                try {/n                    Array.from(document.body.querySelectorAll('div[class*="answerText"]')).filter(t => t.firstChild.innerHTML == reactHandler().memoizedProps.client.question.correctAnswers[0])[0].click();/n                } catch { };/n            };/n        };/n        if (highlightAnswers) {/n            try {/n                Array.from(document.querySelector('div[class*="answersHolder"').children).forEach(x => {/n                    if (reactHandler().memoizedState.question.correctAnswers.includes(x.innerText) || reactHandler().memoizedProps.client.question.correctAnswers.includes(x.innerText)) x.firstChild.style = 'background-color: rgb(0, 207, 119);';/n                    else x.firstChild.style = 'background-color: rgb(225, 40, 33);';/n                });/n            } catch { }/n        };/n        if (curPage == 'kingdom') {/n            Array.from(document.getElementsByClassName('choiceESP')).forEach(x => x.remove())/n            if (choiceESP) {/n                try {/n                    let elements = {/n                        materials: Array.from(document.querySelectorAll('div')).find(x => Array.from(x.children).find(e => e.className.includes('tree'))),/n                        people: Array.from(document.querySelectorAll('div')).find(x => Array.from(x.children).find(e => e.className.includes('users') && e.parentElement.className.includes('statContainer'))),/n                        happiness: Array.from(document.querySelectorAll('div')).find(x => Array.from(x.children).find(e => e.className.includes('grin'))),/n                        gold: Array.from(document.querySelectorAll('div')).find(x => Array.from(x.children).find(e => e.className.includes('coins')))/n                    }/n                    let data = reactHandler().stateNode.state.guest;/n                    Object.entries(data.yes).forEach(x => {/n                        if (x[0] == 'msg') return;/n                        let element = document.createElement('div');/n                        element.className = 'choiceESP';/n                        element.style = 'font-size: 24px; color: rgb(75, 194, 46); font-weight: bolder;';/n                        element.innerText = String(x[1])/n                        elements[x[0]].appendChild(element);/n                    })/n                    Object.entries(data.no).forEach(x => {/n                        if (x[0] == 'msg') return;/n                        let element = document.createElement('div');/n                        element.className = 'choiceESP';/n                        element.style = 'font-size: 24px; color: darkred; font-weight: bolder;';/n                        element.innerText = String(x[1])/n                        elements[x[0]].appendChild(element);/n                    })/n                } catch (e) { }/n            };/n        }/n        if (curPage == 'crypto' && autoPassword) {/n            let { stage, correctPassword } = Object.values(document.querySelector('#app > div > div'))[1].children[1]._owner.stateNode.state;/n            if (stage == "hack") Array.from(document.querySelectorAll('div')).filter(x => x.innerHTML == correctPassword)[0].click();/n        };/n        if (curPage == 'gold' && chestESP) {/n            try {/n                if (reactHandler().stateNode.state.stage == 'prize') {/n                    let { choices } = reactHandler().stateNode.state;/n                    let div = document.querySelector("div[class*='regularBody']").children[1];/n                    if (div) {/n                        if (!document.querySelectorAll(".chest-esp").length) choices.forEach((box, i) => {/n                            textElement = document.createElement('p');/n                            textElement.className = "chest-esp";/n                            textElement.innerText = box.text;/n                            textElement.style = `text-align: center;/n                    font-size: 30px;/n                    color: white;/n                    font-family:Titan One;/n                    sans-serif;/n                    border-color: black;/n                    margin-top: 200px;`/n                            try { div.children[i].appendChild(textElement); } catch (e) { console.log(e) }/n                        });/n                        else choices.forEach((box, i) => {/n                            if (div.children.length == 3 && div.children[i].children[1].innerText != box.text) div.children[i].children[1].innerText = box.text;/n                        })/n                    }/n                }/n            } catch (e) { console.log(e) }/n        };/n    });/n/n    let curPage = getSite();/n    if (curPage && cheats[curPage]) Object.keys(cheats[curPage]).forEach(cheat => {/n        let button = createButton(cheat);/n        button.onclick = cheats[curPage][cheat];/n        cheatDiv.appendChild(button);/n        cheatDiv.appendChild(document.createElement('br'));/n    })/n/n    function createButton(cheat) {/n        let button = document.createElement('button');/n        button.classList.add('cheat');/n        button.innerText = cheat;/n        return button/n    }/n    function getSite(capitalize) {/n        switch (window.location.pathname.split('/')[2]) {/n            case 'rush': return capitalize ? 'Blook Rush' : 'rush';/n            case 'gold': return capitalize ? 'Gold Quest' : 'gold';/n            case 'fishing': return capitalize ? 'Fishing Frenzy' : 'fishing';/n            case 'hack': return capitalize ? 'Crypto Hack' : 'crypto';/n            case 'battle-royale': return capitalize ? 'Battle Royale' : 'royale';/n            case 'factory': return capitalize ? 'Factory' : 'factory';/n            case 'racing': return capitalize ? 'Racing' : 'racing';/n            case 'classic': return capitalize ? 'Classic' : 'classic';/n            default: switch (window.location.pathname.split('/')[1]) {/n                case 'defense': return capitalize ? 'Tower Defense' : 'defense';/n                case 'cafe': return capitalize ? 'Café' : 'cafe';/n                case 'tower': return capitalize ? 'Tower of Doom' : 'doom';/n                case 'kingdom': return capitalize ? 'Crazy Kingdom' : 'kingdom';/n                default: return false;/n            }/n        };/n    };/n    function toggleHidden(e) {/n        e.code == 'KeyE' && (GUI.hidden = !GUI.hidden)/n    };/n    addEventListener('keypress', toggleHidden);/n})()})();











        
        
        
        
        
        
        
        
        
        
        
        
